{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.singleSpaReact = mod.exports;\n  }\n})(this, function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports[\"default\"] = singleSpaReact;\n  _exports.SingleSpaContext = void 0;\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n  /* We don't import parcel.component.js from this file intentionally. See comment\n   * in that file for why\n   */\n  // React context that gives any react component the single-spa props\n\n\n  var SingleSpaContext = null;\n  _exports.SingleSpaContext = SingleSpaContext;\n  var defaultOpts = {\n    // required opts\n    React: null,\n    ReactDOM: null,\n    rootComponent: null,\n    loadRootComponent: null,\n    suppressComponentDidCatchWarning: false,\n    // optional opts\n    domElementGetter: null,\n    parcelCanUpdate: true // by default, allow parcels created with single-spa-react to be updated\n\n  };\n\n  function singleSpaReact(userOpts) {\n    if (_typeof(userOpts) !== 'object') {\n      throw new Error(\"single-spa-react requires a configuration object\");\n    }\n\n    var opts = _objectSpread({}, defaultOpts, userOpts);\n\n    if (!opts.React) {\n      throw new Error(\"single-spa-react must be passed opts.React\");\n    }\n\n    if (!opts.ReactDOM) {\n      throw new Error(\"single-spa-react must be passed opts.ReactDOM\");\n    }\n\n    if (!opts.rootComponent && !opts.loadRootComponent) {\n      throw new Error(\"single-spa-react must be passed opts.rootComponent or opts.loadRootComponent\");\n    }\n\n    if (!SingleSpaContext && opts.React.createContext) {\n      _exports.SingleSpaContext = SingleSpaContext = opts.React.createContext();\n    }\n\n    var lifecycles = {\n      bootstrap: bootstrap.bind(null, opts),\n      mount: mount.bind(null, opts),\n      unmount: unmount.bind(null, opts)\n    };\n\n    if (opts.parcelCanUpdate) {\n      lifecycles.update = update.bind(null, opts);\n    }\n\n    return lifecycles;\n  }\n\n  function bootstrap(opts, props) {\n    if (opts.rootComponent) {\n      // This is a class or stateless function component\n      return Promise.resolve();\n    } else {\n      // They passed a promise that resolves with the react component. Wait for it to resolve before mounting\n      return opts.loadRootComponent().then(function (resolvedComponent) {\n        opts.rootComponent = resolvedComponent;\n      });\n    }\n  }\n\n  function mount(opts, props) {\n    return new Promise(function (resolve, reject) {\n      if (!opts.suppressComponentDidCatchWarning && atLeastReact16(opts.React)) {\n        if (!opts.rootComponent.prototype) {\n          console.warn(\"single-spa-react: \".concat(props.name || props.appName || props.childAppName, \"'s rootComponent does not have a prototype.  If using a functional component, wrap it in an error boundary or other class that implements componentDidCatch to avoid accidentally unmounting the entire single-spa application\"));\n        } else if (!opts.rootComponent.prototype.componentDidCatch) {\n          console.warn(\"single-spa-react: \".concat(props.name || props.appName || props.childAppName, \"'s rootComponent should implement componentDidCatch to avoid accidentally unmounting the entire single-spa application.\"));\n        }\n      }\n\n      var domElementGetter = chooseDomElementGetter(opts, props);\n\n      if (typeof domElementGetter !== 'function') {\n        throw new Error(\"single-spa-react: the domElementGetter for react application '\".concat(props.appName || props.name, \"' is not a function\"));\n      }\n\n      var whenFinished = function whenFinished() {\n        resolve(this);\n      };\n\n      var rootComponentElement = opts.React.createElement(opts.rootComponent, props);\n      var elementToRender = SingleSpaContext ? opts.React.createElement(SingleSpaContext.Provider, {\n        value: props\n      }, rootComponentElement) : rootComponentElement;\n      var domElement = getRootDomEl(domElementGetter, props);\n      var renderedComponent = reactDomRender({\n        elementToRender: elementToRender,\n        domElement: domElement,\n        whenFinished: whenFinished,\n        opts: opts\n      });\n      opts.domElement = domElement;\n    });\n  }\n\n  function unmount(opts, props) {\n    return Promise.resolve().then(function () {\n      opts.ReactDOM.unmountComponentAtNode(opts.domElement);\n    });\n  }\n\n  function update(opts, props) {\n    return new Promise(function (resolve, reject) {\n      var whenFinished = function whenFinished() {\n        resolve(this);\n      };\n\n      var rootComponentElement = opts.React.createElement(opts.rootComponent, props);\n      var elementToRender = SingleSpaContext ? opts.React.createElement(SingleSpaContext.Provider, {\n        value: props\n      }, rootComponentElement) : rootComponentElement;\n      var renderedComponent = reactDomRender({\n        elementToRender: elementToRender,\n        domElement: opts.domElement,\n        whenFinished: whenFinished,\n        opts: opts\n      });\n    });\n  }\n\n  function getRootDomEl(domElementGetter, props) {\n    var el = domElementGetter();\n\n    if (!el) {\n      throw new Error(\"single-spa-react: domElementGetter function for application '\".concat(props.appName || props.name, \"' did not return a valid dom element. Please pass a valid domElement or domElementGetter via opts or props\"));\n    }\n\n    return el;\n  }\n\n  function atLeastReact16(React) {\n    if (React && typeof React.version === 'string' && React.version.indexOf('.') >= 0) {\n      var majorVersionString = React.version.slice(0, React.version.indexOf('.'));\n\n      try {\n        return Number(majorVersionString) >= 16;\n      } catch (err) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  function chooseDomElementGetter(opts, props) {\n    props = props && props.customProps ? props.customProps : props;\n\n    if (props.domElement) {\n      return function () {\n        return props.domElement;\n      };\n    } else if (props.domElementGetter) {\n      return props.domElementGetter;\n    } else if (opts.domElementGetter) {\n      return opts.domElementGetter;\n    } else {\n      return defaultDomElementGetter(props);\n    }\n  }\n\n  function defaultDomElementGetter(props) {\n    var htmlId = \"single-spa-application:\".concat(props.appName || props.name);\n\n    if (!htmlId) {\n      throw Error(\"single-spa-react was not given an application name as a prop, so it can't make a unique dom element container for the react application\");\n    }\n\n    return function defaultDomEl() {\n      var domElement = document.getElementById(htmlId);\n\n      if (!domElement) {\n        domElement = document.createElement('div');\n        domElement.id = htmlId;\n        document.body.appendChild(domElement);\n      }\n\n      return domElement;\n    };\n  }\n\n  function reactDomRender(_ref) {\n    var opts = _ref.opts,\n        elementToRender = _ref.elementToRender,\n        domElement = _ref.domElement,\n        whenFinished = _ref.whenFinished;\n\n    if (opts.renderType === 'createRoot') {\n      return opts.ReactDOM.createRoot(domElement).render(elementToRender, whenFinished);\n    }\n\n    if (opts.renderType === 'hydrate') {\n      return opts.ReactDOM.hydrate(elementToRender, domElement, whenFinished);\n    } // default to this if 'renderType' is null or doesn't match the other options\n\n\n    return opts.ReactDOM.render(elementToRender, domElement, whenFinished);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}